#include "utf.hpp"

#include <algorithm>
#include <bitset>
#include <cstdint>
#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <stdexcept>
#include <tuple>
#include <vector>

template<typename code_point_t = std::uintmax_t>
struct test final
{
	using input_t = code_point_t;
	input_t input;
	using output_t = std::size_t;
	output_t output;
};

struct faker final
{
	std::size_t width;
	constexpr faker(std::size_t w) noexcept
	: width{w}
	{
	}

	template<typename T>
	constexpr bool operator<(T) const noexcept
	{
		//cheating
		return width < sizeof(T)*CHAR_BIT;
	}
	template<typename T>
	constexpr bool operator==(T) const noexcept
	{
		//cheating
		return !width;
	}
	faker &operator>>=(std::size_t v) noexcept
	{
		if(width < v)
		{
			width = 0;
		}
		else
		{
			width -= v;
		}
		return *this;
	}
};

int result = EXIT_SUCCESS;
template<typename code_point_t = std::uintmax_t>
void validate(test<code_point_t> const &t, typename test<code_point_t>::output_t output)
{
	static constexpr std::size_t MAX_NUM_BITS = sizeof(code_point_t)*CHAR_BIT;
	if(output != t.output)
	{
		result = EXIT_FAILURE;
		auto const v = std::bitset<MAX_NUM_BITS>{t.input}.to_string();
		auto trim = v.find('1');
		if(trim == std::string::npos)
		{
			trim = MAX_NUM_BITS-1;
		}
		std::cout << "Fail: 0b" << v.substr(trim) << " (" << v.size() - trim << ")" << " -> " << output << " != " << t.output << std::endl;
	}
}
template<>
void validate<faker>(test<faker> const &t, test<faker>::output_t output)
{
	if(output != t.output)
	{
		result = EXIT_FAILURE;
		std::cout << "Fail: " << t.input.width << " bits -> " << output << " != " << t.output << std::endl;
	}
}

template<typename code_unit_t, typename code_point_t = std::uintmax_t>
void run_tests(std::vector<test<code_point_t>> const &tests)
{
	for(auto const &t : tests)
	{
		validate<code_point_t>(t, LB::utf::min_code_units<code_unit_t>(t.input));
	}
}

int main()
{
	{
		std::cout << "8-bit code units" << std::endl;
		run_tests<std::int8_t>(
		{
			{0b0ull, 1}, //0
			{0b1ull, 1}, //1
			{0b10ull, 1}, //2
			{0b100ull, 1}, //3
			{0b1000ull, 1}, //4
			{0b10000ull, 1}, //5
			{0b100000ull, 1}, //6
			{0b1000000ull, 1}, //7

			{0b10'000000ull, 2}, //8
			{0b100'000000ull, 2}, //9
			{0b1000'000000ull, 2}, //10
			{0b10000'000000ull, 2}, //11

			{0b100000'000000ull, 3}, //12
			{0b1'000000'000000ull, 3}, //13
			{0b10'000000'000000ull, 3}, //14
			{0b100'000000'000000ull, 3}, //15
			{0b1000'000000'000000ull, 3}, //16

			{0b10000'000000'000000ull, 4}, //17
			{0b100000'000000'000000ull, 4}, //18
			{0b1'000000'000000'000000ull, 4}, //19
			{0b10'000000'000000'000000ull, 4}, //20
			{0b100'000000'000000'000000ull, 4}, //21

			{0b1000'000000'000000'000000ull, 5}, //22
			{0b10000'000000'000000'000000ull, 5}, //23
			{0b100000'000000'000000'000000ull, 5}, //24
			{0b1'000000'000000'000000'000000ull, 5}, //25
			{0b10'000000'000000'000000'000000ull, 5}, //26

			{0b100'000000'000000'000000'000000ull, 6}, //27
			{0b1000'000000'000000'000000'000000ull, 6}, //28
			{0b10000'000000'000000'000000'000000ull, 6}, //29
			{0b100000'000000'000000'000000'000000ull, 6}, //30
			{0b1'000000'000000'000000'000000'000000ull, 6}, //31

			{0b10'000000'000000'000000'000000'000000ull, 7}, //32
			{0b100'000000'000000'000000'000000'000000ull, 7}, //33
			{0b1000'000000'000000'000000'000000'000000ull, 7}, //34
			{0b10000'000000'000000'000000'000000'000000ull, 7}, //35
			{0b100000'000000'000000'000000'000000'000000ull, 7}, //36

			{0b1'000000'000000'000000'000000'000000'000000ull, 9}, //37
			{0b10'000000'000000'000000'000000'000000'000000ull, 9}, //38
			{0b100'000000'000000'000000'000000'000000'000000ull, 9}, //39
			{0b1000'000000'000000'000000'000000'000000'000000ull, 9}, //40
			{0b10000'000000'000000'000000'000000'000000'000000ull, 9}, //41
			{0b100000'000000'000000'000000'000000'000000'000000ull, 9}, //42
			{0b1'000000'000000'000000'000000'000000'000000'000000ull, 9}, //43
			{0b10'000000'000000'000000'000000'000000'000000'000000ull, 9}, //44
			{0b100'000000'000000'000000'000000'000000'000000'000000ull, 9}, //45
			{0b1000'000000'000000'000000'000000'000000'000000'000000ull, 9}, //46
			{0b10000'000000'000000'000000'000000'000000'000000'000000ull, 9}, //47

			{0b100000'000000'000000'000000'000000'000000'000000'000000ull, 10}, //48
			{0b1'000000'000000'000000'000000'000000'000000'000000'000000ull, 10}, //49
			{0b10'000000'000000'000000'000000'000000'000000'000000'000000ull, 10}, //50
			{0b100'000000'000000'000000'000000'000000'000000'000000'000000ull, 10}, //51
			{0b1000'000000'000000'000000'000000'000000'000000'000000'000000ull, 10}, //52

			{0b10000'000000'000000'000000'000000'000000'000000'000000'000000ull, 11}, //53
			{0b100000'000000'000000'000000'000000'000000'000000'000000'000000ull, 11}, //54
			{0b1'000000'000000'000000'000000'000000'000000'000000'000000'000000ull, 11}, //55
			{0b10'000000'000000'000000'000000'000000'000000'000000'000000'000000ull, 11}, //56
			{0b100'000000'000000'000000'000000'000000'000000'000000'000000'000000ull, 11}, //57

			{0b1000'000000'000000'000000'000000'000000'000000'000000'000000'000000ull, 12}, //58
			{0b10000'000000'000000'000000'000000'000000'000000'000000'000000'000000ull, 12}, //59
			{0b100000'000000'000000'000000'000000'000000'000000'000000'000000'000000ull, 12}, //60
			{0b1'000000'000000'000000'000000'000000'000000'000000'000000'000000'000000ull, 12}, //61
			{0b10'000000'000000'000000'000000'000000'000000'000000'000000'000000'000000ull, 12}, //62

			{0b100'000000'000000'000000'000000'000000'000000'000000'000000'000000'000000ull, 13}, //63
			{0b1000'000000'000000'000000'000000'000000'000000'000000'000000'000000'000000ull, 13}, //64
		});
		run_tests<std::int8_t, faker>(
		{
			{0, 1}, { 8, 2}, {12, 3}, {17, 4}, {22, 5}, {27, 6}, {32, 7},
			{1, 1}, { 9, 2}, {13, 3}, {18, 4}, {23, 5}, {28, 6}, {33, 7},
			{2, 1}, {10, 2}, {14, 3}, {19, 4}, {24, 5}, {29, 6}, {34, 7},
			{3, 1}, {11, 2}, {15, 3}, {20, 4}, {25, 5}, {30, 6}, {35, 7},
			{4, 1},          {16, 3}, {21, 4}, {26, 5}, {31, 6}, {36, 7},
			{5, 1},
			{6, 1},
			{7, 1},

			{37, 9}, {48, 10}, {53, 11}, {58, 12}, {63, 13}, {68, 14},
			{38, 9}, {49, 10}, {54, 11}, {59, 12}, {64, 13}, {69, 14},
			{39, 9}, {50, 10}, {55, 11}, {60, 12}, {65, 13}, {70, 14},
			{40, 9}, {51, 10}, {56, 11}, {61, 12}, {66, 13}, {71, 14},
			{41, 9}, {52, 10}, {57, 11}, {62, 12}, {67, 13}, {72, 14},
			{42, 9},
			{43, 9},
			{44, 9},
			{45, 9},
			{46, 9},
			{47, 9},

			{73, 16}, {84, 17}, {89, 18}, {94, 19}, { 99, 20}, {104, 21},
			{74, 16}, {85, 17}, {90, 18}, {95, 19}, {100, 20}, {105, 21},
			{75, 16}, {86, 17}, {91, 18}, {96, 19}, {101, 20}, {106, 21},
			{76, 16}, {87, 17}, {92, 18}, {97, 19}, {102, 20}, {107, 21},
			{77, 16}, {88, 17}, {93, 18}, {98, 19}, {103, 20}, {108, 21},
			{78, 16},
			{79, 16},
			{80, 16},
			{81, 16},
			{82, 16},
			{83, 16},

			{109, 23}, {120, 24}, {125, 25}, {130, 26}, {135, 27}, {140, 28},
			{110, 23}, {121, 24}, {126, 25}, {131, 26}, {136, 27}, {141, 28},
			{111, 23}, {122, 24}, {127, 25}, {132, 26}, {137, 27}, {142, 28},
			{112, 23}, {123, 24}, {128, 25}, {133, 26}, {138, 27}, {143, 28},
			{113, 23}, {124, 24}, {129, 25}, {134, 26}, {139, 27}, {144, 28},
			{114, 23},
			{115, 23},
			{116, 23},
			{117, 23},
			{118, 23},
			{119, 23},

			{145, 30}, {156, 31}, {161, 32}, {166, 33}, {171, 34}, {176, 35},
			{146, 30}, {157, 31}, {162, 32}, {167, 33}, {172, 34}, {177, 35},
			{147, 30}, {158, 31}, {163, 32}, {168, 33}, {173, 34}, {178, 35},
			{148, 30}, {159, 31}, {164, 32}, {169, 33}, {174, 34}, {179, 35},
			{149, 30}, {160, 31}, {165, 32}, {170, 33}, {175, 34}, {180, 35},
			{150, 30},
			{151, 30},
			{152, 30},
			{153, 30},
			{154, 30},
			{155, 30},

			{181, 37}, {192, 38}, {197, 39}, {202, 40}, {207, 41}, {212, 42},
			{182, 37}, {193, 38}, {198, 39}, {203, 40}, {208, 41}, {213, 42},
			{183, 37}, {194, 38}, {199, 39}, {204, 40}, {209, 41}, {214, 42},
			{184, 37}, {195, 38}, {200, 39}, {205, 40}, {210, 41}, {215, 42},
			{185, 37}, {196, 38}, {201, 39}, {206, 40}, {211, 41}, {216, 42},
			{186, 37},
			{187, 37},
			{188, 37},
			{189, 37},
			{190, 37},
			{191, 37},
		});
	}
	{
		std::cout << "16-bit code units" << std::endl;
		run_tests<std::int16_t>(
		{
			{0b0ull, 1}, //0
			{0b1ull, 1}, //1
			{0b10ull, 1}, //2
			{0b100ull, 1}, //3
			{0b1000ull, 1}, //4
			{0b10000ull, 1}, //5
			{0b100000ull, 1}, //6
			{0b1000000ull, 1}, //7
			{0b10000000ull, 1}, //8
			{0b100000000ull, 1}, //9
			{0b1000000000ull, 1}, //10
			{0b10000000000ull, 1}, //11
			{0b100000000000ull, 1}, //12
			{0b1000000000000ull, 1}, //13
			{0b10000000000000ull, 1}, //14
			{0b100000000000000ull, 1}, //15

			{0b10'00000000000000ull, 2}, //16
			{0b100'00000000000000ull, 2}, //17
			{0b1000'00000000000000ull, 2}, //18
			{0b10000'00000000000000ull, 2}, //19
			{0b100000'00000000000000ull, 2}, //20
			{0b1000000'00000000000000ull, 2}, //21
			{0b10000000'00000000000000ull, 2}, //22
			{0b100000000'00000000000000ull, 2}, //23
			{0b1000000000'00000000000000ull, 2}, //24
			{0b10000000000'00000000000000ull, 2}, //25
			{0b100000000000'00000000000000ull, 2}, //26
			{0b1000000000000'00000000000000ull, 2}, //27

			{0b10000000000000'00000000000000ull, 3}, //28
			{0b1'00000000000000'00000000000000ull, 3}, //29
			{0b10'00000000000000'00000000000000ull, 3}, //30
			{0b100'00000000000000'00000000000000ull, 3}, //31
			{0b1000'00000000000000'00000000000000ull, 3}, //32
			{0b10000'00000000000000'00000000000000ull, 3}, //33
			{0b100000'00000000000000'00000000000000ull, 3}, //34
			{0b1000000'00000000000000'00000000000000ull, 3}, //35
			{0b10000000'00000000000000'00000000000000ull, 3}, //36
			{0b100000000'00000000000000'00000000000000ull, 3}, //37
			{0b1000000000'00000000000000'00000000000000ull, 3}, //38
			{0b10000000000'00000000000000'00000000000000ull, 3}, //39
			{0b100000000000'00000000000000'00000000000000ull, 3}, //40

			{0b1000000000000'00000000000000'00000000000000ull, 4}, //41
			{0b10000000000000'00000000000000'00000000000000ull, 4}, //42
			{0b1'00000000000000'00000000000000'00000000000000ull, 4}, //43
			{0b10'00000000000000'00000000000000'00000000000000ull, 4}, //44
			{0b100'00000000000000'00000000000000'00000000000000ull, 4}, //45
			{0b1000'00000000000000'00000000000000'00000000000000ull, 4}, //46
			{0b10000'00000000000000'00000000000000'00000000000000ull, 4}, //47
			{0b100000'00000000000000'00000000000000'00000000000000ull, 4}, //48
			{0b1000000'00000000000000'00000000000000'00000000000000ull, 4}, //49
			{0b10000000'00000000000000'00000000000000'00000000000000ull, 4}, //50
			{0b100000000'00000000000000'00000000000000'00000000000000ull, 4}, //51
			{0b1000000000'00000000000000'00000000000000'00000000000000ull, 4}, //52
			{0b10000000000'00000000000000'00000000000000'00000000000000ull, 4}, //53

			{0b100000000000'00000000000000'00000000000000'00000000000000ull, 5}, //54
			{0b1000000000000'00000000000000'00000000000000'00000000000000ull, 5}, //55
			{0b10000000000000'00000000000000'00000000000000'00000000000000ull, 5}, //56
			{0b1'00000000000000'00000000000000'00000000000000'00000000000000ull, 5}, //57
			{0b10'00000000000000'00000000000000'00000000000000'00000000000000ull, 5}, //58
			{0b100'00000000000000'00000000000000'00000000000000'00000000000000ull, 5}, //59
			{0b1000'00000000000000'00000000000000'00000000000000'00000000000000ull, 5}, //60
			{0b10000'00000000000000'00000000000000'00000000000000'00000000000000ull, 5}, //61
			{0b100000'00000000000000'00000000000000'00000000000000'00000000000000ull, 5}, //62
			{0b1000000'00000000000000'00000000000000'00000000000000'00000000000000ull, 5}, //63
			{0b10000000'00000000000000'00000000000000'00000000000000'00000000000000ull, 5}, //64
		});
		run_tests<std::int16_t, faker>(
		{
			{ 0, 1}, {16, 2}, {28, 3}, {41, 4}, {54, 5}, {67, 6}, {80, 7}, { 93, 8}, {106, 9}, {119, 10}, {132, 11}, {145, 12}, {158, 13}, {171, 14}, {184, 15},
			{ 1, 1}, {17, 2}, {29, 3}, {42, 4}, {55, 5}, {68, 6}, {81, 7}, { 94, 8}, {107, 9}, {120, 10}, {133, 11}, {146, 12}, {159, 13}, {172, 14}, {185, 15},
			{ 2, 1}, {18, 2}, {30, 3}, {43, 4}, {56, 5}, {69, 6}, {82, 7}, { 95, 8}, {108, 9}, {121, 10}, {134, 11}, {147, 12}, {160, 13}, {173, 14}, {186, 15},
			{ 3, 1}, {19, 2}, {31, 3}, {44, 4}, {57, 5}, {70, 6}, {83, 7}, { 96, 8}, {109, 9}, {122, 10}, {135, 11}, {148, 12}, {161, 13}, {174, 14}, {187, 15},
			{ 4, 1}, {20, 2}, {32, 3}, {45, 4}, {58, 5}, {71, 6}, {84, 7}, { 97, 8}, {110, 9}, {123, 10}, {136, 11}, {149, 12}, {162, 13}, {175, 14}, {188, 15},
			{ 5, 1}, {21, 2}, {33, 3}, {46, 4}, {59, 5}, {72, 6}, {85, 7}, { 98, 8}, {111, 9}, {124, 10}, {137, 11}, {150, 12}, {163, 13}, {176, 14}, {189, 15},
			{ 6, 1}, {22, 2}, {34, 3}, {47, 4}, {60, 5}, {73, 6}, {86, 7}, { 99, 8}, {112, 9}, {125, 10}, {138, 11}, {151, 12}, {164, 13}, {177, 14}, {190, 15},
			{ 7, 1}, {23, 2}, {35, 3}, {48, 4}, {61, 5}, {74, 6}, {87, 7}, {100, 8}, {113, 9}, {126, 10}, {139, 11}, {152, 12}, {165, 13}, {178, 14}, {191, 15},
			{ 8, 1}, {24, 2}, {36, 3}, {49, 4}, {62, 5}, {75, 6}, {88, 7}, {101, 8}, {114, 9}, {127, 10}, {140, 11}, {153, 12}, {166, 13}, {179, 14}, {192, 15},
			{ 9, 1}, {25, 2}, {37, 3}, {50, 4}, {63, 5}, {76, 6}, {89, 7}, {102, 8}, {115, 9}, {128, 10}, {141, 11}, {154, 12}, {167, 13}, {180, 14}, {193, 15},
			{10, 1}, {26, 2}, {38, 3}, {51, 4}, {64, 5}, {77, 6}, {90, 7}, {103, 8}, {116, 9}, {129, 10}, {142, 11}, {155, 12}, {168, 13}, {181, 14}, {194, 15},
			{11, 1}, {27, 2}, {39, 3}, {52, 4}, {65, 5}, {78, 6}, {91, 7}, {104, 8}, {117, 9}, {130, 10}, {143, 11}, {156, 12}, {169, 13}, {182, 14}, {195, 15},
			{12, 1},          {40, 3}, {53, 4}, {66, 5}, {79, 6}, {92, 7}, {105, 8}, {118, 9}, {131, 10}, {144, 11}, {157, 12}, {170, 13}, {183, 14}, {196, 15},
			{13, 1},
			{14, 1},
			{15, 1},

			{197, 17}, {224, 18},
			{198, 17},
			{199, 17},
			{200, 17},
			{201, 17},
			{202, 17},
			{203, 17},
			{204, 17},
			{205, 17},
			{206, 17},
			{207, 17},
			{208, 17},
			{209, 17},
			{210, 17},
			{211, 17},
			{212, 17},
			{213, 17},
			{214, 17},
			{215, 17},
			{216, 17},
			{217, 17},
			{218, 17},
			{219, 17},
			{220, 17},
			{221, 17},
			{222, 17},
			{223, 17},
		});
	}

	return result;
}
