#include "utf.hpp"

#include <bitset>
#include <cstdint>
#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <vector>

struct test final
{
	using input_t = std::vector<std::uintmax_t>;
	input_t input;
	using output_t = std::size_t;
	output_t output;
};

int result = EXIT_SUCCESS;
template<typename code_unit_t>
void validate(test const &t, test::output_t output)
{
	static constexpr std::size_t NUM_BITS = sizeof(code_unit_t)*CHAR_BIT;
	if(output != t.output)
	{
		result = EXIT_FAILURE;
		std::cout << "Fail: {";
		bool first = true;
		for(auto const v : t.input)
		{
			if(first)
			{
				first = false;
			}
			else
			{
				std::cout << ", ";
			}
			std::cout << "0b" << std::bitset<NUM_BITS>{v};
		}
		std::cout << "} -> " << output << " != " << t.output << std::endl;
	}
}

template<typename code_unit_t>
auto cast(test::input_t const &input)
-> std::vector<code_unit_t>
{
	std::vector<code_unit_t> r;
	for(auto const v : input)
	{
		r.push_back(static_cast<code_unit_t>(v));
	}
	return r;
}

template<typename code_unit_t>
void run_tests(std::vector<test> const &tests)
{
	std::cout << "No verification" << std::endl;
	for(auto const &t : tests)
	{
		auto const input = cast<code_unit_t>(t.input);
		validate<code_unit_t>(t, LB::utf::num_code_units(std::cbegin(input), std::cend(input)));
	}
	std::cout << "Verification of invalid sequences - too short" << std::endl;
	for(auto t : tests)
	{
		if(t.input.size() != t.output)
		{
			t.output = 0;
		}
		auto const input = cast<code_unit_t>(t.input);
		validate<code_unit_t>(t, LB::utf::num_code_units(std::cbegin(input), std::cend(input), true));
	}
	std::cout << "Verification of invalid sequences - unexpected 0b11 header" << std::endl;
	for(auto t : tests)
	{
		if(t.input.size() < t.output)
		{
			t.input.resize(t.output, std::uintmax_t{0b11} << (sizeof(code_unit_t)*CHAR_BIT - 2));
			t.output = 0;
		}
		auto const input = cast<code_unit_t>(t.input);
		validate<code_unit_t>(t, LB::utf::num_code_units(std::cbegin(input), std::cend(input), true));
	}
	std::cout << "Verification of invalid sequences - unexpected 0b0 header" << std::endl;
	for(auto t : tests)
	{
		if(t.input.size() < t.output)
		{
			t.input.resize(t.output);
			t.output = 0;
		}
		auto const input = cast<code_unit_t>(t.input);
		validate<code_unit_t>(t, LB::utf::num_code_units(std::cbegin(input), std::cend(input), true));
	}
	std::cout << "Verification of valid sequences" << std::endl;
	for(auto t : tests)
	{
		if(t.input.size() < t.output)
		{
			t.input.resize(t.output, std::uintmax_t{0b1} << (sizeof(code_unit_t)*CHAR_BIT - 1));
		}
		auto const input = cast<code_unit_t>(t.input);
		validate<code_unit_t>(t, LB::utf::num_code_units(std::cbegin(input), std::cend(input), true));
	}
}

int main()
{
	run_tests<std::int8_t>
	(
		{
			{{}, 0},
			{{0b00000000}, 1},
			{{0b10000000}, 0},
			{{0b01000000}, 1},
			{{0b00100000}, 1},
			{{0b00010000}, 1},
			{{0b00001000}, 1},
			{{0b00000100}, 1},
			{{0b00000010}, 1},
			{{0b00000001}, 1},
			{{0b11000000}, 2},
			{{0b11100000}, 3},
			{{0b11110000}, 4},
			{{0b11111000}, 5},
			{{0b11111100}, 6},
			{{0b11111110}, 7},
			{{0b11111111}, 0},
			{{0b11111111, 0b00000000}, 0},
			{{0b11111111, 0b10000000}, 9},
			{{0b11111111, 0b11000000}, 0},
			{{0b11111111, 0b10100000}, 10},
			{{0b11111111, 0b10110000}, 11},
			{{0b11111111, 0b10111000}, 12},
			{{0b11111111, 0b10111100}, 13},
			{{0b11111111, 0b10111110}, 14},
			{{0b11111111, 0b10111111}, 0},
			{{0b11111111, 0b10111111, 0b00000000}, 0},
			{{0b11111111, 0b10111111, 0b10000000}, 16},
			{{0b11111111, 0b10111111, 0b11000000}, 0},
			{{0b11111111, 0b10111111, 0b10100000}, 17},
			{{0b11111111, 0b10111111, 0b10110000}, 18},
			{{0b11111111, 0b10111111, 0b10111000}, 19},
			{{0b11111111, 0b10111111, 0b10111100}, 20},
			{{0b11111111, 0b10111111, 0b10111110}, 21},
			{{0b11111111, 0b10111111, 0b10111111}, 0},
			{{0b11111111, 0b10111111, 0b10111111, 0b00000000}, 0},
			{{0b11111111, 0b10111111, 0b10111111, 0b10000000}, 23},
			{{0b11111111, 0b10111111, 0b10111111, 0b11000000}, 0},
			{{0b11111111, 0b10111111, 0b10111111, 0b10100000}, 24},
			{{0b11111111, 0b10111111, 0b10111111, 0b10110000}, 25},
			{{0b11111111, 0b10111111, 0b10111111, 0b10111000}, 26},
			{{0b11111111, 0b10111111, 0b10111111, 0b10111100}, 27},
			{{0b11111111, 0b10111111, 0b10111111, 0b10111110}, 28},
			{{0b11111111, 0b10111111, 0b10111111, 0b10111111}, 0},
			{{0b11111111, 0b10111111, 0b10111111, 0b10111111, 0b00000000}, 0},
			{{0b11111111, 0b10111111, 0b10111111, 0b10111111, 0b10000000}, 30},
			{{0b11111111, 0b10111111, 0b10111111, 0b10111111, 0b11000000}, 0},
			{{0b11111111, 0b10111111, 0b10111111, 0b10111111, 0b10100000}, 31},
			{{0b11111111, 0b10111111, 0b10111111, 0b10111111, 0b10110000}, 32},
			{{0b11111111, 0b10111111, 0b10111111, 0b10111111, 0b10111000}, 33},
			{{0b11111111, 0b10111111, 0b10111111, 0b10111111, 0b10111100}, 34},
		}
	);
	run_tests<std::int16_t>
	(
		{
			{{}, 0},
			{{0b00000000'00000000}, 1},
			{{0b10000000'00000000}, 0},
			{{0b11000000'00000000}, 2},
			{{0b11100000'00000000}, 3},
			{{0b11110000'00000000}, 4},
			{{0b11111000'00000000}, 5},
			{{0b11111100'00000000}, 6},
			{{0b11111110'00000000}, 7},
			{{0b11111111'00000000}, 8},
			{{0b11111111'10000000}, 9},
			{{0b11111111'11000000}, 10},
			{{0b11111111'11100000}, 11},
			{{0b11111111'11110000}, 12},
			{{0b11111111'11111000}, 13},
			{{0b11111111'11111100}, 14},
			{{0b11111111'11111110}, 15},
			{{0b11111111'11111111}, 0},
			{{0b11111111'11111111, 0b00000000'00000000}, 0},
			{{0b11111111'11111111, 0b10000000'00000000}, 17},
			{{0b11111111'11111111, 0b11000000'00000000}, 0},
			{{0b11111111'11111111, 0b10100000'00000000}, 18},
			{{0b11111111'11111111, 0b10110000'00000000}, 19},
			{{0b11111111'11111111, 0b10111000'00000000}, 20},
			{{0b11111111'11111111, 0b10111100'00000000}, 21},
			{{0b11111111'11111111, 0b10111110'00000000}, 22},
			{{0b11111111'11111111, 0b10111111'00000000}, 23},
			{{0b11111111'11111111, 0b10111111'10000000}, 24},
			{{0b11111111'11111111, 0b10111111'11000000}, 25},
			{{0b11111111'11111111, 0b10111111'11100000}, 26},
			{{0b11111111'11111111, 0b10111111'11110000}, 27},
			{{0b11111111'11111111, 0b10111111'11111000}, 28},
			{{0b11111111'11111111, 0b10111111'11111100}, 29},
			{{0b11111111'11111111, 0b10111111'11111110}, 30},
			{{0b11111111'11111111, 0b10111111'11111111}, 0},
			{{0b11111111'11111111, 0b10111111'11111111, 0b00000000'00000000}, 0},
			{{0b11111111'11111111, 0b10111111'11111111, 0b10000000'00000000}, 32},
			{{0b11111111'11111111, 0b10111111'11111111, 0b11000000'00000000}, 0},
			{{0b11111111'11111111, 0b10111111'11111111, 0b10100000'00000000}, 33},
			{{0b11111111'11111111, 0b10111111'11111111, 0b10110000'00000000}, 34},
		}
	);
	run_tests<std::int32_t>
	(
		{
			{{}, 0},
			{{0b00000000'00000000'00000000'00000000u}, 1},
			{{0b10000000'00000000'00000000'00000000u}, 0},
			{{0b11000000'00000000'00000000'00000000u}, 2},
			{{0b11100000'00000000'00000000'00000000u}, 3},
			{{0b11110000'00000000'00000000'00000000u}, 4},
			{{0b11111000'00000000'00000000'00000000u}, 5},
			{{0b11111100'00000000'00000000'00000000u}, 6},
			{{0b11111110'00000000'00000000'00000000u}, 7},
			{{0b11111111'00000000'00000000'00000000u}, 8},
			{{0b11111111'10000000'00000000'00000000u}, 9},
			{{0b11111111'11000000'00000000'00000000u}, 10},
			{{0b11111111'11100000'00000000'00000000u}, 11},
			{{0b11111111'11110000'00000000'00000000u}, 12},
			{{0b11111111'11111000'00000000'00000000u}, 13},
			{{0b11111111'11111100'00000000'00000000u}, 14},
			{{0b11111111'11111110'00000000'00000000u}, 15},
			{{0b11111111'11111111'00000000'00000000u}, 16},
			{{0b11111111'11111111'10000000'00000000u}, 17},
			{{0b11111111'11111111'11000000'00000000u}, 18},
			{{0b11111111'11111111'11100000'00000000u}, 19},
			{{0b11111111'11111111'11110000'00000000u}, 20},
			{{0b11111111'11111111'11111000'00000000u}, 21},
			{{0b11111111'11111111'11111100'00000000u}, 22},
			{{0b11111111'11111111'11111110'00000000u}, 23},
			{{0b11111111'11111111'11111111'00000000u}, 24},
			{{0b11111111'11111111'11111111'10000000u}, 25},
			{{0b11111111'11111111'11111111'11000000u}, 26},
			{{0b11111111'11111111'11111111'11100000u}, 27},
			{{0b11111111'11111111'11111111'11110000u}, 28},
			{{0b11111111'11111111'11111111'11111000u}, 29},
			{{0b11111111'11111111'11111111'11111100u}, 30},
			{{0b11111111'11111111'11111111'11111110u}, 31},
			{{0b11111111'11111111'11111111'11111111u}, 0},
			{{0b11111111'11111111'11111111'11111111u, 0b00000000'00000000'00000000'00000000u}, 0},
			{{0b11111111'11111111'11111111'11111111u, 0b10000000'00000000'00000000'00000000u}, 33},
			{{0b11111111'11111111'11111111'11111111u, 0b11000000'00000000'00000000'00000000u}, 0},
			{{0b11111111'11111111'11111111'11111111u, 0b10100000'00000000'00000000'00000000u}, 34},
		}
	);

	return result;
}
